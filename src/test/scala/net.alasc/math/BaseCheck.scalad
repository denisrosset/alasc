package net.alasc.math

import org.scalacheck._
import scala.util.Random
import org.scalatest.FunSuite
import bsgs._

object BaseGenerators {
  import MathieuGroups._
  val groupAndBase = for {
    (generators, order) <- Gen.oneOf(M11, M12, M24, RubikCube.group)
    n <- Gen.choose(3, 6)
    baseAnsatz <- Gen.listOfN(n, Gen.choose(0, 49))
    base = baseAnsatz.distinct
    seed <- Gen.choose(0, 1000)
    useRandom <- Gen.oneOf(true, false)
    options = if (useRandom) BSGSOptions.userRandom(new scala.util.Random(seed)) else BSGSOptions.deterministic.options
    bsgs = BSGS.fromGeneratorsAndOrder(generators, order)(Perm.Algebra, options)
  } yield (bsgs, base, options, seed)
}
object BaseSpec extends Properties("BSGS") {
  import BaseGenerators._

  property("After changing base and changing back, transversal orbits should be the same") = Prop.forAll(groupAndBase) {
    case (bsgs, base, options, seed) => {
      implicit def opt = options
      val start = bsgs
      start.check
      val modified = start.withBase(base)
      modified.check
      val comingBack = modified.withBase(start.base)
      comingBack.check
      start.chain.map(_.orbitSet).sameElements(comingBack.chain.map(_.orbitSet))
    }
  }
}
