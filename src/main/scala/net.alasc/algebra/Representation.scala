package net.alasc.algebra

import scala.annotation.tailrec
import scala.reflect.{ClassTag, classTag}

import net.alasc.syntax.lattice._
import net.alasc.syntax.permutationAction._
import net.alasc.util._

/** Faithful permutation representation of a finite group on the domain 0 ... n - 1, where
  * n is the size of the representation.
  * 
  * Representation differs from `FaithfulPermutationAction` by having a defined size, and can be
  * by construction correct only a subset of elements of type G. The function `represents` can be
  * used to check the validity of the representation of a given element. The usage of `action` on
  * invalid elements produces undefined results.
  */
trait Representation[G] extends AnyRef {
  self =>
  /** Size of the representation, constraining the support of any permutation in 0 ... n-1. */
  def size: Int
  /** Faithful permutation action used to represent the finite group. */
  def action: FaithfulPermutationAction[G]
  def images(g: G): IndexedSeq[Int] = action.images(g, size)
  /** Tests if this representation can represent the element `g`. */
  def represents(g: G): Boolean
  val representations: Representations[G]
  def conjugatedBy(ip: InversePair[G]): Representation[G] =
    if (represents(ip.g)) this else {
      val reprG = representations.get(Seq(ip.g))
      representations.lattice.join(representations.tryCast(self).get, reprG)
    }
}

/** Describes a family of permutation representations of a group G. Depending on the particular subgroup H of G,
  * the permutation representation can differ: thus, one obtains a representation valid for a set of generators
  * by calling `representation`.
  *
  * Given representations a and b, one defines a joined representation c such that if A and B are subgroups
  * of G for which a and b are valid, the representation c is valid for the union of A and B. This is described
  * using a join-semilattice.
  * 
  * Methods are generic in their arguments (i.e. they accept a `Representation[G]`), and return a representation
  * specific to the current class.
  */ 
trait Representations[G] {
  // Members to implement

  /** Own representation type. */
  type R <: Representation[G]

  /** Extraction of a specialized representation. */
  def tryCast(r: Representation[G]): RefOption[R]

  def rClassTag: ClassTag[R]
  def get(generators: Iterable[G]): R

  /** Lattice of representations. */
  implicit def lattice: BoundedBelowLattice[R]

  // Members with default implementation
  object Typed {
    def unapply(r: Representation[G]): RefOption[R] = tryCast(r)
  }

  /** If `r` is a representation of the correct type, returns `r`, or creates a new representation from
    * `generators`.
    */ 
  def get(genR: Representation[G], generators: Iterable[G]): R = genR match {
    case Typed(r) => r
    case _ => get(generators)
  }

  /** Returns a representation that is compatible with the union of subgroups generated by `generators1` and
    * `generators2`. Representations `r1` and `r2` are provided, and will be used in the join provided they
    * are of the type of the representations described by this object.
    */
  def repJoin(r1: Representation[G], r2: Representation[G],
    generators1: Iterable[G], generators2: Iterable[G]): R =
    r1 match {
      case Typed(rep1) => r2 match {
        case Typed(rep2) =>
          if (rep1 eq rep2) rep1 else (rep1 join rep2)
        case _ =>
          if (generators2.forall(rep1.represents(_)))
            rep1
          else
            (rep1 join get(generators2))
      }
      case _ => r2 match {
        case Typed(rep2) =>
          if (generators1.forall(rep2.represents(_)))
            rep2
          else
            (get(generators1) join rep2)
        case _ => get(generators1 ++ generators2)
      }
    }

  /** Returns a representation that is compatible with the union of subgroups generated by `generators1` and
    * `generators2`. The representations `r1` is provided for the first subgroup, and will be used in the join
    * provided it is of the type of the representations described by this object.
    */
  def repJoin(r1: Representation[G], generators1: Iterable[G], generators2: Iterable[G]): R =
    r1 match {
      case Typed(rep1) => rep1 join get(generators2)
      case _ => get(generators1 ++ generators2)
    }

  /** Returns a representation that is compatible with the intersection of subgroups generated by `generators1` and
    * `generators2`. Representations `r1` and `r2` are provided, and will be used in the join provided they
    * are of the type of the representations described by this object.
    */
  def repMeet(r1: Representation[G], r2: Representation[G],
    generators1: Iterable[G], generators2: Iterable[G]): R =
    Typed.unapply(r1).getOrElse(get(generators1)) meet Typed.unapply(r2).getOrElse(get(generators2))
}

object Representations {
  def apply[G](implicit ev: Representations[G]): Representations[G] = ev
}

/** Implementation of representations for genuine permutation types such as `Perm` or `Cycles`. */
final class PermutationRepresentations[P](implicit ev: Permutation[P]) extends Representations[P] {
  self =>
  def forSize(size: Int): Representation[P] = R(size)
  def rClassTag = classTag[R]
  case class R(size: Int) extends Representation[P] {
    require(size >= 2) // to have primitive wreath action faithful
    def action = ev
    val representations = self
    def represents(p: P) = p.supportMax.getOrElse(-1) < size
    override def conjugatedBy(ip: InversePair[P]) = R(size.max(ip.g.supportMax.getOrElse(-1) + 1))
  }
  def get(generators: Iterable[P]) = {
    @tailrec def rec(size: Int, iterator: Iterator[P]): Int =
      if (iterator.hasNext)
        rec(size.max(iterator.next.supportMax.getOrElse(-1) + 1), iterator)
      else size
    R(rec(2, generators.iterator))
  }
  def tryCast(r: Representation[P]) = r match {
    case typed: R => RefSome(typed)
    case _ => RefNone
  }
  implicit object lattice extends BoundedBelowLattice[R] {
    def zero = R(2)
    def partialCompare(x: R, y: R) = (x.size - y.size).signum.toDouble
    def join(x: R, y: R) = if (x.size >= y.size) x else y
    def meet(x: R, y: R) = if (x.size <= y.size) x else y
  }
}
